# add layers to g
p <- g + geom_point()
print(p)
# more layers
p + geom_smooth()
p + geom_smooth(method = "lm")
p + geom_smooth(method = "lm") + facet_grid(cyl~.)
# changing styles
g + geom_point(color = "steelblue", size = 4, alpha = 1/2)
h <- g + geom_point(aes(color = cyl), size = 4, alpha = 1/2)
print(h)
# annotating
i <- h + labs(title = "mtcars") + labs(x = "miles per gallon", y = "displacement")
print(i)
j <- i + geom_smooth(method = "lm", se = FALSE, size = 4, linetype = 3, color = "red")
print(j)
j + theme_bw(base_family = "Times")
# Axis limits
testdata <- data.frame(x = 1:100, y = rnorm(100))
testdata[50, 2] <- 100 #outlier
plot(testdata$x, testdata$y, type ="l", ylim = c(-3,3))
A <- ggplot(testdata, aes(x = x, y = y))
B <- A + geom_line()
B + ylim(-3,3) #excludes the outlier from the dataset
B + coord_cartesian(ylim = c(-3,3)) #includes the point but doesn't plot it
# categorize a continuous variable
cutpoints <- quantile(mtcars$wt, seq(0, 1, length = 4), na.rm = TRUE)
mtcars$new_fact <- cut(mtcars$wt, cutpoints)
levels(mtcars$new_fact)
ggplot(mtcars, aes(mpg, disp)) + facet_grid(.~new_fact)
library(ggplot2)
str(mpg)
data("mtcars")
qplot(displ, hwy, data = mpg)
# automatic legend
qplot(displ, hwy, data = mpg, col = drv)
# adding a geom
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
# plot histogram by specifying only one variable
qplot(hwy, data = mpg, fill = drv)
# facets
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
# linear models as geoms
qplot(mpg, disp, data = mtcars, facets = cyl~.) + geom_smooth(method = "lm", se = FALSE)
# another way of plotting using "fundamentals"
g <- ggplot(mtcars, aes(mpg, disp))
print(g) # nothing
# add layers to g
p <- g + geom_point()
print(p)
# more layers
p + geom_smooth()
p + geom_smooth(method = "lm")
p + geom_smooth(method = "lm") + facet_grid(cyl~.)
# changing styles
g + geom_point(color = "steelblue", size = 4, alpha = 1/2)
h <- g + geom_point(aes(color = cyl), size = 4, alpha = 1/2)
print(h)
# annotating
i <- h + labs(title = "mtcars") + labs(x = "miles per gallon", y = "displacement")
print(i)
j <- i + geom_smooth(method = "lm", se = FALSE, size = 4, linetype = 3, color = "red")
print(j)
j + theme_bw(base_family = "Times")
# Axis limits
testdata <- data.frame(x = 1:100, y = rnorm(100))
testdata[50, 2] <- 100 #outlier
plot(testdata$x, testdata$y, type ="l", ylim = c(-3,3))
A <- ggplot(testdata, aes(x = x, y = y))
B <- A + geom_line()
B + ylim(-3,3) #excludes the outlier from the dataset
B + coord_cartesian(ylim = c(-3,3)) #includes the point but doesn't plot it
# categorize a continuous variable
cutpoints <- quantile(mtcars$wt, seq(0, 1, length = 4), na.rm = TRUE)
mtcars$new_fact <- cut(mtcars$wt, cutpoints)
levels(mtcars$new_fact)
ggplot(mtcars, aes(mpg, disp)) + geom_point() + facet_grid(.~new_fact)
library(ggplot2)
str(mpg)
data("mtcars")
qplot(displ, hwy, data = mpg)
# automatic legend
qplot(displ, hwy, data = mpg, col = drv)
# adding a geom
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
# plot histogram by specifying only one variable
qplot(hwy, data = mpg, fill = drv)
# facets
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
# linear models as geoms
qplot(mpg, disp, data = mtcars, facets = cyl~.) + geom_smooth(method = "lm", se = FALSE)
# another way of plotting using "fundamentals"
g <- ggplot(mtcars, aes(mpg, disp))
print(g) # nothing
# add layers to g
p <- g + geom_point()
print(p)
# more layers
p + geom_smooth()
p + geom_smooth(method = "lm")
p + geom_smooth(method = "lm") + facet_grid(cyl~.)
# changing styles
g + geom_point(color = "steelblue", size = 4, alpha = 1/2)
h <- g + geom_point(aes(color = cyl), size = 4, alpha = 1/2)
print(h)
# annotating
i <- h + labs(title = "mtcars") + labs(x = "miles per gallon", y = "displacement")
print(i)
j <- i + geom_smooth(method = "lm", se = FALSE, size = 4, linetype = 3, color = "red")
print(j)
j + theme_bw(base_family = "Times")
# Axis limits
testdata <- data.frame(x = 1:100, y = rnorm(100))
testdata[50, 2] <- 100 #outlier
plot(testdata$x, testdata$y, type ="l", ylim = c(-3,3))
A <- ggplot(testdata, aes(x = x, y = y))
B <- A + geom_line()
B + ylim(-3,3) #excludes the outlier from the dataset
B + coord_cartesian(ylim = c(-3,3)) #includes the point but doesn't plot it
# categorize a continuous variable
cutpoints <- quantile(mtcars$wt, seq(0, 1, length = 4), na.rm = TRUE)
mtcars$new_fact <- cut(mtcars$wt, cutpoints)
levels(mtcars$new_fact)
ggplot(mtcars, aes(mpg, disp)) + geom_point() + facet_grid(.~new_fact)
ggplot(mtcars, aes(mpg, disp)) + geom_point() + facet_grid(cyl~new_fact)
install.packages("nlme")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
########################## SIMPLE ##########################
xyplot(Ozone ~ Wind, data = airquality)
####################### MULTIVARIATE #######################
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
############################################################
# A lattice produces an object of class "trellis", that,
# unlike base plots is a printable object. Base plots print
# directly in the device, they do not produce such objects
############################################################
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p)
class(p)
################# LATTICE PANEL FUNCTIONS #################
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f*x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2,1))
# custom panel function
xyplot(y ~ x | f, panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = median(y), lty = 2)
})
xyplot(y ~ x | f, panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.lmline(x, y, col = 2)
panel.text("yo")
})
library(nlme)
library(lattice)
library(ggplot2)
data("airquality")
xyplot(weight ~ Time | Diet, BodyWeight)
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
library(nlme)
library(lattice)
library(ggplot2)
data("airquality")
xyplot(weight ~ Time | Diet, BodyWeight)
airquality <- transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~Month)
library(nlme)
library(lattice)
library(ggplot2)
data("airquality")
xyplot(weight ~ Time | Diet, BodyWeight)
airquality <- transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~Month)
A <- ggplot(airquality, aes(Wind, Ozone))
print(A)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
x <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.5, y + 0.5, labels = as.character(1:12))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.5, y + 0.5, labels = as.character(1:12))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
# create section separator with hashtags
sctn <- function(tex){
# tex is the text to be put in the middle of two lines of "#"
tex <- toupper(tex)
ln <- nchar(tex)
hashhash <- rep("#", (60 - ln - 2)/2)
cat(hashhash, " ", tex, " ", hashhash, sep = "")
}
sctn("clustered data")
sctn("finding distances")
###################### CLUSTERED DATA ######################
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
#################### FINDING DISTANCES ####################
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
sctn("clustering")
#################### FINDING DISTANCES ####################
###################### CLUSTERED DATA ######################
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
#################### FINDING DISTANCES ####################
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
######################## CLUSTERING ########################
h_clustering <- hclust(distxy)
plot(h_clustering)
###################### CLUSTERED DATA ######################
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
#################### FINDING DISTANCES ####################
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
######################## CLUSTERING ########################
h_clustering <- hclust(distxy)
plot(h_clustering)
rm(list = ls())
swirl()
library(swirl)
swirl()
head(airquality)
range(Ozone, na.rm = TRUE)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab = Month, ylab = "Ozone (ppb)", col.a)
boxplot(Ozone ~ Month, airquality, xlab = Month, ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone ~ Month, airquality, xlab = Month, ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
rm(list = ls())
install.packages("RColorBrewer")
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
?volcano
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
par(mfrow = c(1,2))
image(volcano, col = pal(20))
image(volcano, col = pal(10))
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
par(mfrow = c(2, 1))
image(volcano, col = pal(20))
image(volcano, col = pal(10))
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
par(mfrow = c(2, 1))
image(volcano, col = pal(20))
image(volcano, col = pal(10))
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
# par(mfrow = c(2, 1))
image(volcano, col = pal(20))
image(volcano, col = pal(10))
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
par(mfrow = c(1, 2))
image(volcano, col = pal(20))
image(volcano, col = pal(10))
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
par(mfrow = c(1, 2), mar = c(1,1,1,1))
image(volcano, col = pal(20))
image(volcano, col = pal(10))
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
par(mfrow = c(1, 2), mar = c(1,1,1,1))
image(volcano, col = pal(20))
image(volcano, col = pal(5))
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
par(mfrow = c(1, 2), mar = c(1,1,1,1))
image(volcano, col = pal(20)) #more shades
image(volcano, col = pal(5)) #less shades
cols2 <- brewer.pal(3, "Set3")
x <- rnorm(1000000)
y <- rnorm(1000000)
smoothScatter(x, y, colramp = colorRampPalette(cols2))
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
par(mfrow = c(1, 2), mar = c(1,1,1,1))
image(volcano, col = pal(20)) #more shades
image(volcano, col = pal(5)) #less shades
cols2 <- brewer.pal(3, "Set3")
cols2
x <- rnorm(1000000)
y <- rnorm(1000000)
smoothScatter(x, y, colramp = colorRampPalette(cols2))
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, pch = 19, col = rgb(0, 0, 0, 0.2))
dev.off()
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, pch = 19, col = rgb(0, 0, 0, 0.2))
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, pch = 19, col = rgb(0, 0, 0, 0.2))
plot(x, y, pch = 19, col = rgb(255, 0, 0, 0.5))
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, pch = 19, col = rgb(0, 0, 0, 0.2))
plot(x, y, pch = 19, col = rgb(1, 0, 0, 0.5))
########################## PLOT4 ##########################
# Of the four types of sources indicated by the type (point,
# nonpoint, onroad, nonroad) variable, which of these four
# sources have seen decreases in emissions from 1999–2008
# for Baltimore City? Which have seen increases in emissions
# from 1999–2008? Use the ggplot2 plotting system to make a
# plot answer this question.
######################### IMPORTS #########################
library(dplyr)
library(ggplot2)
p <- "/home/rogelio/Desktop/datasciencecoursera/"
ath <- "data/eda_final_project"
path <- paste0(p, ath)
setwd(path)
NEI <- readRDS("./summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
head(SCC)
dim(SCC)
dim(NEI)
head(NEI)
SCC$Short.Name[1:10]
class(SCC$Short.Name)
a <- grepl("[Cc]oal", SCC$Short.Name, perl = TRUE)
head(a)
sum(a)
grepl("[Cc]oal", c(" coal ", "coal", "idfiheCoaloijrfoi"))
grepl("[Cc]oal", c(" coal/", "coal", "idfiheCoaloijrfoi"))
# create section separator with hashtags
sctn <- function(tex){
# tex is the text to be put in the middle of two lines of "#"
tex <- toupper(tex)
ln <- nchar(tex)
hashhash <- rep("#", (60 - ln - 2)/2)
cat(hashhash, " ", tex, " ", hashhash, sep = "")
}
sctn("reshaping data")
a <- grepl("[Cc]oal", SCC$Short.Name, perl = TRUE)
sum(a)
head(SCC)
b <- grepl("[Cc]oal", SCC$EI.Sector, perl = TRUE)
sum(b)
a <- grepl("[Cc]oal", SCC$Short.Name, perl = TRUE)
SCC$SCC[a]
b <- SCC$SCC[a]
dim(b)
length(b)
sum(a)
table(NEI$SCC)
class(NEI$SCC)
c <- as.numeric(NEI$SCC)
str(NEI$SCC)
sum(is.na(NEI$SCC))
d <- is.na(c)
sum(d)
length(c)
e <- NEI$SCC[d]
head(e)
a
e <- NEI$SCC[d]
head(b)
length(b)
b
SC_coal <- grepl("[Cc]oal", SCC$Short.Name, perl = TRUE)
codes_coal <- SCC$SCC[SC_coal]
codes_coal
class(codes_coal)
df <- data.frame(a = c(1,2,3), b = c(7,8,9))
subset(df, a %in% c(2,4))
filter(df, a %in% c(2,4))
identical(subset(df, a %in% c(2,4)), filter(df, a %in% c(2,4)))
a <- filter(df, a %in% c(2,4))
b <- subset(df, a %in% c(2,4))
identical(a,b)
names(NEI)
SC_coal <- grepl("[Cc]oal", SCC$Short.Name, perl = TRUE)
# getting the codes to subset in NEI
codes_coal <- SCC$SCC[SC_coal]
# subsetting NEI
NEI_coal <- filter(NEI, SCC %in% codes_coal)
head(NEI_coal)
dim(NEI_coal)
SC_coal <- grepl("[Cc]oal", SCC$Short.Name, perl = TRUE)
# getting the codes to subset in NEI
codes_coal <- SCC$SCC[SC_coal]
# subsetting NEI
NEI_coal <- filter(NEI, SCC %in% codes_coal) %>%
aggregate(Emissions ~ year, data = ., sum)
sum(NEI_coal$Emissions)
sum(filter(NEI, SCC %in% codes_coal)$Emissions)
sctn("plot device")
ath <- "exploratory_data_analysis_final_project"
path <- paste0(p, ath)
setwd(path)
p <- ggplot(NEI_coal, aes(year, Emissions)) +
geom_point(col = "red", size = 3)
print(p)
p <- ggplot(NEI_coal, aes(year, Emissions)) +
geom_point(col = "red", size = 3) +
geom_smooth(method = "lm") +
labs(title = "Emissions by year and by source (Baltimore City)")
print(p)
p <- ggplot(NEI_coal, aes(year, Emissions)) +
geom_point(col = "red", size = 3) +
geom_smooth(method = "lm") +
labs(title = "National emissions (coal combustion-related)") +
scale_x_discrete(limits = c(1999, 2002, 2005, 2008)) +
labs(y = "Emissions (tons)")
print(p)
png("./plot4.png")
p <- ggplot(NEI_coal, aes(year, Emissions)) +
geom_point(col = "red", size = 3) +
geom_smooth(method = "lm") +
labs(title = "National emissions (coal combustion-related)") +
scale_x_discrete(limits = c(1999, 2002, 2005, 2008)) +
labs(y = "Emissions (tons)")
print(p)
dev.off()
p <- ggplot(NEI_coal, aes(year, Emissions)) +
geom_point(col = "red", size = 3) +
geom_smooth(method = "lm") +
labs(title = "National emissions (coal combustion-related)") +
scale_x_discrete(limits = c(1999, 2002, 2005, 2008)) +
labs(y = "Emissions (tons)") +
theme_set(theme_gray(base_size = 14)) +
theme(plot.margin = unit(c(1.5,1.5,1.5,0.5), "lines"))
print(p)
png("./plot4.png")
p <- ggplot(NEI_coal, aes(year, Emissions)) +
geom_point(col = "red", size = 3) +
geom_smooth(method = "lm") +
labs(title = "National emissions (coal combustion-related)") +
scale_x_discrete(limits = c(1999, 2002, 2005, 2008)) +
labs(y = "Emissions (tons)") +
theme_set(theme_gray(base_size = 14)) +
theme(plot.margin = unit(c(1.5,1.5,1.5,0.5), "lines"))
print(p)
dev.off()
